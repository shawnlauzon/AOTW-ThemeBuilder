package com.confidentsoftware.themebuilder;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

import android.app.Activity;
import android.app.Fragment;
import android.app.LoaderManager;
import android.content.Context;
import android.content.CursorLoader;
import android.content.Loader;
import android.database.Cursor;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.SimpleCursorAdapter;
import android.widget.TextView;

import com.confidentsoftware.themebuilder.Dictionary.Images;

public class ImageGallery extends Fragment implements
		LoaderManager.LoaderCallbacks<Cursor>, AdapterView.OnItemClickListener {

	private static final String TAG = "ImageGallery";

	private static final String[] PROJECTION_IMAGES = { Images.THUMB_URL,
			Images.NUM_LIKES, Images._ID, };
	private static final int[] LAYOUT_FIELDS = { R.id.image_thumb, R.id.like };
	private static final int URL_COLUMN = 0;
	private static final int LIKE_COLUMN = 1;
	private static final int ID_COLUMN = 2;

	private GridView mGrid;
	private TextView mWord;
	private ImageAdapter mAdapter;

	private OnImageSelectedListener mListener;

	private Uri mWordUri;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		super.onCreateView(inflater, container, savedInstanceState);
		return inflater.inflate(R.layout.image_gallery, container, false);
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		mGrid = (GridView) getActivity().findViewById(R.id.grid);
		mWord = (TextView) getActivity().findViewById(R.id.word);

		mGrid.setOnItemClickListener(this);
	}

	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		try {
			mListener = (OnImageSelectedListener) activity;
		} catch (ClassCastException e) {
			throw new ClassCastException(activity.toString()
					+ " must implement OnImageSelectedListener");
		}
	}

	public void showImagesForWord(Uri wordUri) {
		mWordUri = wordUri;
		mWord.setText(mWordUri.toString());

		clear();
		getLoaderManager().restartLoader(0, null, this);
	}

	public void clear() {
		mAdapter = new ImageAdapter(getActivity());
		mAdapter.setViewBinder(new ImageViewBinder(getView()));
		mGrid.setAdapter(mAdapter);
	}

	@Override
	public Loader<Cursor> onCreateLoader(int id, Bundle args) {
		Uri uri = Dictionary.Words.CONTENT_URI.buildUpon().appendPath(
				mWordUri.getLastPathSegment()).appendPath(
				Dictionary.PATH_IMAGES).build();
		Log.d(TAG, "onCreateLoader: " + uri);
		return new CursorLoader(getActivity(), uri, PROJECTION_IMAGES, null,
				null, Dictionary.Images._ID);
	}

	@Override
	public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
		Log.d(TAG, "onLoadFinished");
		mAdapter.swapCursor(data);
	}

	@Override
	public void onLoaderReset(Loader<Cursor> data) {
		Log.d(TAG, "onLoaderResult");
		mAdapter.swapCursor(null);
	}

	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position,
			long id) {
		Log.d(TAG, "Item clicked!!! " + id);
		Log.d(TAG, "View: " + view);
		Log.d(TAG, "position: " + position);
		mListener.onImageSelected(mWordUri.buildUpon().appendPath(
				Dictionary.PATH_IMAGES).appendPath(String.valueOf(id)).build());
	}

	/**
	 * Implemented by the Activity to handle events generated by this fragment.
	 * 
	 * @author slauzon
	 * 
	 */
	public interface OnImageSelectedListener {
		public void onImageSelected(Uri imageUri);
	}

	/**
	 * Maps columns from a cursor to the fields defined in the XML file. Each
	 * row of the cursor gets inflated into a image_gallery_item.
	 * 
	 * @author slauzon
	 * 
	 */
	private static class ImageAdapter extends SimpleCursorAdapter {
		public ImageAdapter(Context context) {
			super(context, R.layout.image_gallery_item, null,
					PROJECTION_IMAGES, LAYOUT_FIELDS, 0);
		}

		public boolean hasStableIds() {
			return true;
		}
	}

	/**
	 * Used to bind columns to fields in the view. This is needed because the
	 * result of the database query is a URL, and we need to retrieve the file
	 * from that URL, either from the ImageCache or downloading it.
	 * 
	 * @author slauzon
	 * 
	 */
	private static class ImageViewBinder implements
			SimpleCursorAdapter.ViewBinder {

		final BlockingQueue<ImageInfo> mImagesToDownload = new LinkedBlockingQueue<ImageInfo>();
		
		// TODO Make this a WeakReference
		final View mParent;

		Handler handler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				ImageView iv = (ImageView) mParent.findViewWithTag(msg.arg1);
				// If we can't find a view with this tag, just means it's been
				// scrolled off the screen or something; it's ok for us to
				// just ignore it
				if (iv != null) {
					iv.setImageDrawable((Drawable) msg.obj);
				} 
			}
		};

		private AtomicInteger counter = new AtomicInteger(1);

		public ImageViewBinder(View parent) {
			mParent = parent;
			new Thread(new Downloader()).start();
		}

		@Override
		public boolean setViewValue(View view, Cursor cursor, int columnIndex) {
			if (columnIndex == URL_COLUMN) {
				String id = cursor.getString(ID_COLUMN);
				String url = cursor.getString(columnIndex);
				int tag = counter.getAndIncrement();
				view.setTag(tag);
				ImageInfo ii = new ImageInfo(id, url, tag);
				mImagesToDownload.offer(ii);
				return true;
			} else if (columnIndex == LIKE_COLUMN) {
				int numLikes = cursor.getInt(columnIndex);
				if (numLikes > 0) {
					view.setVisibility(View.VISIBLE);
				}
				return true;
			} else {
				return false;
			}
		}

		private static class ImageInfo {
			public final int tag;
			public final String imageId;
			public final String url;

			public ImageInfo(String id, String url, int tag) {
				this.imageId = id;
				this.url = url;
				this.tag = tag;
			}
		}

		private class Downloader implements Runnable {
			@Override
			public void run() {
				while (true) {
					ImageInfo ii;
					try {
						ii = mImagesToDownload.take();
					} catch (InterruptedException e) {
						break;
					}
					File file = FileCache.getInstance().get(
							FileCache.TYPE_THUMB, ii.imageId);
					if (!file.exists()) {
						Log.d(TAG, "Downloading from " + ii.url);
						try {
							file.createNewFile();
							NetworkClient.downloadFile(ii.url, file);
						} catch (IOException e) {
							Log.w(TAG, "Could not download image " + ii.imageId, e);
						}
					}
					Drawable drawable = Drawable.createFromPath(file
							.getAbsolutePath());

					handler.sendMessage(handler.obtainMessage(0, ii.tag, 0,
							drawable));
				}
			}
		}
	}
}
